{"version":3,"sources":["components/AddCategory/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem/GifGridItem.jsx","components/GifGrid/GifGrid.jsx","hooks/useFetchGifs.js","components/GiftExpertApp/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAmCeA,EAhCY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAMC,SAVa,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IAC3BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAMlB,SACE,uBACEO,KAAK,OACLC,YAAY,kBACZC,MAAOV,EACPW,SAnBoB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,a,+BCLdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEyBC,UAAUH,GAFnC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAaZM,GAbY,4CAAH,sDCULO,EAVY,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCwBDO,EA1BQ,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SASxB,ECX0B,SAACA,GAC3B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAEV,UAEJ,CAACpB,IAEGqB,EDNmBM,CAAa3B,GAA/BO,EAAR,EAAQA,KAAMa,EAAd,EAAcA,QAEd,OACE,qCACE,oBAAIJ,UAAU,sCAAd,SAAqDhB,IACpDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEV,qBAAKA,UAAU,YAAf,SACGT,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEYnBiB,EAhCO,WAElB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAQA,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ6C,EAAWpB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,YClB7B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.cbed7993.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const hadnleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n      e.preventDefault(); //Esto previene que el navegador se recargue\r\n      if (inputValue.trim().length>2) {\r\n        setCategories(cats=>[inputValue,...cats]);    \r\n        setInputValue('');\r\n      }\r\n      \r\n      \r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search for gifs\"\r\n        value={inputValue}\r\n        onChange={hadnleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","//Devuelve una promesa\r\n\r\nexport const getGifs = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=0Lis2nQu8C933ymj39nsXc5gCOEnxYKl`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","import React /* , { useState, useEffect } */ from \"react\";\r\nimport { useFetchGifs } from \"../../hooks/useFetchGifs\";\r\n/* import { getGifs } from \"../../helpers/getGifs\"; */\r\nimport GifGridItem from \"../GifGridItem/GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  /* const [images, setimages] = useState([]);\r\n  \r\n    //Si la categoría cambia, se volverá a disparar la petición http\r\n    useEffect(() => {\r\n      getGifs(category)\r\n          .then(setimages)\r\n    }, [category]); */\r\n\r\n  const { data, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeInUp\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n      {\r\n        <div className=\"card-grid\">\r\n          {data.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setstate({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 1000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, {useState} from 'react';\r\nimport AddCategory from '../AddCategory/AddCategory'\r\nimport GifGrid from '../GifGrid/GifGrid'\r\nconst GiftExpertApp = ()=>{\r\n    \r\n    const [categories, setCategories] = useState(['One punch']);\r\n\r\n    //Una forma de añadir categorias\r\n    /* const handleAdd=()=>{\r\n        //setCategories([...categories,'HunterXHunter']);\r\n        setCategories(cats=>['HunterXHunter',...cats]);\r\n    }; */\r\n\r\n    return(\r\n        <>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            \r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category)=>\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}\r\nexport default GiftExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './components/GiftExpertApp/GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}